// src/common/filters/http-exception.filter.ts

/* Description -
The HttpExceptionFilter provides centralized error handling for all HTTP exceptions in the NestJS application. By intercepting any thrown HttpException, it transforms errors into a standardized JSON response format that includes essential information like status code, timestamp, request path, HTTP method, and a human-readable error message. The filter also incorporates the unique requestId (generated by the RequestLoggerMiddleware) to help correlate errors with specific requests in logs. It intelligently logs errors with appropriate severity levels - using error level for server errors (500+) and warning level for client errors (400-499). This ensures consistent error reporting across the application while providing both users and developers with clear, actionable information about what went wrong. The standardized error format simplifies error handling on the client side and improves the overall API user experience.
*/
import {
    ExceptionFilter,
    Catch,
    ArgumentsHost,
    HttpException,
    Logger,
} from '@nestjs/common';
import { Request, Response } from 'express';

@Catch(HttpException)
export class HttpExceptionFilter implements ExceptionFilter {
    private readonly logger = new Logger(HttpExceptionFilter.name);

    catch(exception: HttpException, host: ArgumentsHost) {
        const ctx = host.switchToHttp();
        const response = ctx.getResponse<Response>();
        const request = ctx.getRequest<Request>();
        const status = exception.getStatus();
        const errorResponse = exception.getResponse();
        const requestId = request['requestId'] || 'unknown';

        // Create a readable error message
        const errorMessage =
            typeof errorResponse === 'object' && 'message' in errorResponse
                ? errorResponse['message']
                : exception.message;

        const errorObj = {
            statusCode: status,
            timestamp: new Date().toISOString(),
            path: request.url,
            method: request.method,
            requestId,
            message: errorMessage,
        };

        // Log the error with context
        if (status >= 500) {
            this.logger.error(
                `[${requestId}] ${request.method} ${request.url} ${status}: ${JSON.stringify(errorMessage)}`,
                exception.stack,
            );
        } else if (status >= 400) {
            this.logger.warn(
                `[${requestId}] ${request.method} ${request.url} ${status}: ${JSON.stringify(errorMessage)}`,
            );
        }

        // Send the error response
        response.status(status).json(errorObj);
    }
}